// Funkcja do uzycia filtra
private void uzyj_filtra(int[] maska)
{
    Bitmap b1 = (Bitmap)pictureBox1.Image;
    Bitmap b2 = (Bitmap)pictureBox2.Image;

    Color k, k1, k2, k3, k4, k5, k6, k7, k8, k9;
    int r, g, b, suma_maski = 0;

    for (int x = 0; x < width; x++)
    {
        for (int y = 0; y < height; y++)
        {
            //warunek dla k1 (lewy gorny rog piksela)
            if (x - 1 == -1 || y - 1 == -1) k1 = Color.FromArgb(0, 0, 0);
            else k1 = b1.GetPixel(x - 1, y - 1);
            //warunek dla k2 (nad pikselem)
            if (x - 1 == -1) k2 = Color.FromArgb(0, 0, 0);
            else k2 = b1.GetPixel(x - 1, y);
            //warunek dla k3 (prawy gorny rog piksela)
            if (x - 1 == -1 || y + 1 == height) k3 = Color.FromArgb(0, 0, 0);
            else k3 = b1.GetPixel(x - 1, y + 1);
            //warunek dla k4 (lewy bok piksela)
            if (y - 1 == -1) k4 = Color.FromArgb(0, 0, 0);
            else k4 = b1.GetPixel(x, y - 1);
            //warunek dla k5 (piksel srodkowy)
            k5 = b1.GetPixel(x, y);
            //warunek dla k6 (prawy bok piksela)
            if (y + 1 == height) k6 = Color.FromArgb(0, 0, 0);
            else k6 = b1.GetPixel(x, y + 1);
            //warunek dla k7 (lewy dolny rog piksela)
            if (x + 1 == width || y - 1 == -1) k7 = Color.FromArgb(0, 0, 0);
            else k7 = b1.GetPixel(x + 1, y - 1);
            //warunek dla k8 (dol piksela)
            if (x + 1 == width) k8 = Color.FromArgb(0, 0, 0);
            else k8 = b1.GetPixel(x + 1, y);
            //warunek dla k9 (prawy dolny rog piksela)
            if (x + 1 == width || y + 1 == height) k9 = Color.FromArgb(0, 0, 0);
            else k9 = b1.GetPixel(x + 1, y + 1);

            r = (k1.R * maska[1]) + (k2.R * maska[1]) + (k3.R * maska[2]) + (k4.R * maska[3]) + (k5.R * maska[4]) + (k6.R * maska[5]) + (k7.R * maska[6]) + (k8.R * maska[7]) + (k9.R * maska[8]);
            g = (k1.G * maska[1]) + (k2.G * maska[1]) + (k3.G * maska[2]) + (k4.G * maska[3]) + (k5.G * maska[4]) + (k6.G * maska[5]) + (k7.G * maska[6]) + (k8.G * maska[7]) + (k9.G * maska[8]);
            b = (k1.B * maska[1]) + (k2.B * maska[1]) + (k3.B * maska[2]) + (k4.B * maska[3]) + (k5.B * maska[4]) + (k6.B * maska[5]) + (k7.B * maska[6]) + (k8.B * maska[7]) + (k9.B * maska[8]);

            suma_maski += maska[0] + maska[1] + maska[2] + maska[3] + maska[4] + maska[5] + maska[6] + maska[7] + maska[8];

            if (suma_maski != 0) r = r / suma_maski;
            if (r > 255) r = 255;
            if (r < 0) r = 0;

            if (suma_maski != 0) g = g / suma_maski;
            if (g > 255) g = 255;
            if (g < 0) g = 0;

            if (suma_maski != 0) b = b / suma_maski;
            if (b > 255) b = 255;
            if (b < 0) b = 0;

            k = Color.FromArgb(r, g, b);
            b2.SetPixel(x, y, k);

            suma_maski = 0;
        }
    }

    pictureBox2.Refresh();
}

// *** Lab 7-8 *** - Filtry
private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
{
    int[] maska;

    if (comboBox2.Text == "Rozmywający Uśredniający")
    {
        maska = new int[] {1, 1, 1,
                           1, 1, 1, 
                           1, 1, 1};
        uzyj_filtra(maska);
    }
    else if (comboBox2.Text == "Rozmywający Gauss'a")
    {
        maska = new int[] {1, 2, 1,
                           2, 4, 2, 
                           1, 2, 1};
        uzyj_filtra(maska);
    }
    else if (comboBox2.Text == "Wyostrzający Roberts'a")
    {
        maska = new int[] {0, 0, 0,
                           0, 1, -1, 
                           0, 0, 0};
        uzyj_filtra(maska);
    }
    else if (comboBox2.Text == "Wyostrzający Prewitt'a")
    {
        maska = new int[] {1, 0, -1,
                           1, 0, -1, 
                           1, 0, -1};
        uzyj_filtra(maska);
    }
    else if (comboBox2.Text == "Wyostrzający Sobel'a")
    {
        maska = new int[] {1, 0, -1,
                           2, 0, -2, 
                           1, 0, -1};
        uzyj_filtra(maska);
    }
}
